<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.dataset.mapper.RankMapper">

    <select id="getArticleRank">
        WITH RankedMaterials AS (
            SELECT
                m.material_id AS id,
                m.title AS name,
                (COALESCE(c.comment_count, 0) * 3 + COALESCE(d.download_count, 0) * 5 + COALESCE(v.view_count, 0) * 1 + COALESCE(s.star_count, 0) * 8) AS score
            FROM
                materials m
                    LEFT JOIN (
                    SELECT material_id, COUNT(*) AS comment_count
                    FROM comments
                    GROUP BY material_id
                ) c ON m.material_id = c.material_id
                    LEFT JOIN (
                    SELECT material_id, COUNT(*) AS download_count
                    FROM downloads
                    GROUP BY material_id
                ) d ON m.material_id = d.material_id
                    LEFT JOIN (
                    SELECT material_id, COUNT(*) AS view_count
                    FROM view_history
                    GROUP BY material_id
                ) v ON m.material_id = v.material_id
                    LEFT JOIN (
                    SELECT material_id, COUNT(*) AS star_count
                    FROM stars
                    GROUP BY material_id
                ) s ON m.material_id = s.material_id
        )
        SELECT
            id,
            name,
            ROW_NUMBER() OVER (ORDER BY score DESC) AS rank,
            score
        FROM RankedMaterials
        ORDER BY score DESC
        LIMIT #{limit};
    </select>
    
    <select id="getUserRank">
        WITH RankedUsers AS (
            SELECT
                u.user_id AS id,
                u.nickname AS name,
                (COALESCE(c.comment_count, 0) * 5 + COALESCE(d.download_count, 0) * 8 + COALESCE(v.view_count, 0) * 1 + COALESCE(s.star_count, 0) * 3) AS score
            FROM
                users u
                    LEFT JOIN (
                    SELECT user_id, COUNT(*) AS comment_count
                    FROM comments
                    WHERE state=1
                    GROUP BY user_id
                ) c ON u.user_id = c.user_id
                    LEFT JOIN (
                    SELECT user_id, COUNT(*) AS download_count
                    FROM downloads
                    GROUP BY user_id
                ) d ON u.user_id = d.user_id
                    LEFT JOIN (
                    SELECT user_id, COUNT(*) AS view_count
                    FROM view_history
                    GROUP BY user_id
                ) v ON u.user_id = v.user_id
                    LEFT JOIN (
                    SELECT user_id, COUNT(*) AS star_count
                    FROM stars
                    GROUP BY user_id
                ) s ON u.user_id = s.user_id
        )
        SELECT
            id,
            name,
            ROW_NUMBER() OVER (ORDER BY score DESC) AS rank,
            score
        FROM RankedUsers
        ORDER BY score DESC
        LIMIT #{limit};
    </select>
</mapper>